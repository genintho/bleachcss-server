import loggerFactory from "../lib/logger";
const logger = loggerFactory("db");

const sqlite3 = require("sqlite3").verbose();
import * as crypto from "crypto";
const fs = require("fs");

const PATH = "/tmp/bleachCSS.sqlite";

const db = new sqlite3.Database(PATH);

export function init() {
    return new Promise<void>(async (resolve, reject) => {
        logger.info("Need to create the DB structure");
        await _dbRun(fs.readFileSync("sql/main_applications.sql", "utf-8"));
        await _dbRun(fs.readFileSync("sql/main_css_files.sql", "utf-8"));
        await _dbRun(
            fs.readFileSync("sql/main_css_file_variations.sql", "utf-8")
        );
        await _dbRun(fs.readFileSync("sql/main_css_selectors.sql", "utf-8"));
        await _dbRun(
            fs.readFileSync("sql/main_css_file_variations.sql", "utf-8")
        );
        await _dbRun(
            fs.readFileSync("sql/main_selector_file_mappings.sql", "utf-8")
        );

        resolve();
    });
}

function _dbRun(query: string): Promise<void> {
    return new Promise<void>((resolve, reject) => {
        db.serialize(() => {
            db.run(query, () => {
                resolve();
            });
        });
    });
}

// db.serialize(function() {
//     db.run("CREATE TABLE lorem (info TEXT)");

//     var stmt = db.prepare("INSERT INTO lorem VALUES (?)");
//     for (var i = 0; i < 10; i++) {
//         stmt.run("Ipsum " + i);
//     }
//     stmt.finalize();

//     db.each("SE  LECT rowid AS id, info FROM lorem", function(err, row) {
//         console.log(row.id + ": " + row.info);
//     });
// });

// db.close();

// export function getApp(applicationID: number): Promise<Application> {
//     return new Promise<Application>((resolve, reject) => {
//         pool.query(
//             "SELECT * FROM applications where id=?",
//             applicationID,
//             function(error, results, fields) {
//                 if (error) {
//                     reject(error);
//                     return;
//                 }

//                 resolve(results[0]);
//                 return;
//             }
//         );
//     });
// }

export function getAppIdByKey(key: string): Promise<number> {
    return new Promise<number>((resolve, reject) => {
        resolve(1);
        // pool.query(
        //     "SELECT id FROM applications where client_key=?",
        //     key,
        //     (error, results, fields) => {
        //         if (error) {
        //             reject(error);
        //             return;
        //         }

        //         resolve(results[0].id);
        //         return;
        //     }
        // );
    });
}

export function getCSSFilesVariationsByUrls(
    applicationID: number,
    urls: string[]
): Promise<CSSFileVariation[]> {
    return new Promise<CSSFileVariation[]>((resolve, reject) => {
        db.serialize(() => {
            db.all(
                "SELECT id, application_id, css_file_id, url FROM css_file_variations WHERE url in (?) AND application_id=?",
                [urls, applicationID],
                function(error, results) {
                    if (error) {
                        reject(error);
                        return;
                    }
                    resolve(results);
                    return;
                }
            );
        });
    });
}

// export function getCSSFileVariationByID(id: number): Promise<CSSFileVariation> {
//     return new Promise<CSSFileVariation>((resolve, reject) => {
//         pool.query(
//             "SELECT id, application_id, css_file_id, url, fetch_status FROM css_file_variations WHERE id=?",
//             [id],
//             function(error, results, fields) {
//                 if (error) {
//                     reject(error);
//                     return;
//                 }
//                 resolve(results[0]);
//                 return;
//             }
//         );
//     });
// }

export function insertCssFileVariation(
    applicationID: number,
    cssFileID: number,
    url: string
): Promise<CSSFileVariation> {
    return new Promise<CSSFileVariation>((resolve, reject) => {
        db.serialize(() => {
            db.run(
                "INSERT INTO css_file_variations(application_id, css_file_id, url, created_at, updated_at) VALUES (?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)",
                [applicationID, cssFileID, url],
                function(error, results, fields) {
                    if (error) {
                        reject(error);
                        return;
                    }

                    resolve({
                        id: this.lastID,
                        application_id: applicationID,
                        css_file_id: cssFileID,
                        url: url,
                    });
                    return;
                }
            );
        });
    });
}

function _generateInsertQuery(
    safeAppID: number,
    selectors: string[],
    shouldUpdateSeen: boolean
) {
    let sql = "INSERT ";
    sql += shouldUpdateSeen ? "" : "OR IGNORE ";

    sql +=
        "INTO css_selectors(" +
        "application_id, " +
        "md5, " +
        "selector," +
        "created_at, " +
        "updated_at";
    if (shouldUpdateSeen) {
        sql += ", seen_at";
    }
    sql += ") VALUES";
    sql += selectors.map(selector => {
        let value =
            "(" +
            safeAppID +
            ", " +
            '"0x' +
            crypto
                .createHash("md5")
                .update(selector)
                .digest("hex") +
            '", ' +
            '"' +
            selector +
            '"' +
            ", " +
            "CURRENT_TIMESTAMP, " +
            "CURRENT_TIMESTAMP";
        if (shouldUpdateSeen) {
            value += ", CURRENT_TIMESTAMP";
        }
        value += ")";
        return value;
    });
    // if (shouldUpdateSeen) {
    //     sql += " ON DUPLICATE KEY UPDATE seen_at=CURRENT_TIMESTAMP";
    // }
    return sql;
}

export function insertNewSelectors(
    appId: number,
    cssFileID,
    selectors: string[],
    shouldUpdateSeen = false
): Promise<number> {
    return new Promise<number>((resolve, reject) => {
        // pool.getConnection(function(err, connection) {
        //     connection.beginTransaction(err => {
        //         if (err) {
        //             return reject(err);
        //         }

        const safeAppID = appId;
        const sql = _generateInsertQuery(
            safeAppID,
            selectors,
            shouldUpdateSeen
        );
        // sql = sql.substring(0, sql.length-1);

        db.serialize(() => {
            db.run(sql, async function(err, results) {
                if (err) {
                    logger.error("error", err);
                    reject(err);
                    return;
                }

                if (this.changes !== selectors.length) {
                    logger.error(
                        "Inserted number of selector do not match existing"
                    );
                    reject();
                }
                const lastInsertID = this.lastID;
                logger.info("last insert id", lastInsertID);
                if (!lastInsertID) {
                    console.error("No insert id");
                    reject();
                }

                const newIDRange: number[] = [];
                for (let i = 0; i < selectors.length; i++) {
                    newIDRange.push(lastInsertID + i);
                }

                // Insert in the join table
                await insertNewSelectorMapping(appId, cssFileID, newIDRange);
                //     connection.commit(function(err) {
                //         if (err) {
                //             return connection.rollback(function() {
                //                 throw err;
                //             });
                //         }
                //         connection.release();
                //         resolve(results.insertId);
                //     });
                // });
            });
        });
    });
}

// export function deleteSelector(selectorId: number): Promise<void> {
//     return new Promise<void>((resolve, reject) => {
//         const sql = "DELETE FROM css_selectors WHERE id=? LIMIT 1;";
//         pool.query(sql, [selectorId], (err, results) => {
//             if (err) {
//                 reject();
//                 return;
//             }
//             resolve();
//         });
//     });
// }

export function insertNewSelectorMapping(
    applicationID: number,
    cssFileID: number,
    selectorIDs: number[]
): Promise<number> {
    return new Promise<number>((resolve, reject) => {
        const safeAppID = applicationID;
        const safeCSSFileID = cssFileID;

        let sql =
            "INSERT OR IGNORE INTO selector_file_mappings(application_id, css_file_id, css_selector_id) VALUES";
        sql += selectorIDs.map(selectorID => {
            return (
                "(" + safeAppID + ", " + safeCSSFileID + "," + selectorID + ")"
            );
        });
        // sql = sql.substring(0, sql.length-1);
        db.serialize(() => {
            db.run(sql, function(err, results) {
                if (err) {
                    reject(err);
                    return;
                }
                if (this.changes !== selectorIDs.length) {
                    console.error(
                        "Weird number of selector inserted does not match"
                    );
                    reject("MissMatch");
                }
                resolve(this.lastID);
            });
        });
    });
}

// export function deleteSelectorMapping(
//     cssFileId: number,
//     selectorId: number
// ): Promise<void> {
//     return new Promise<void>((resolve, reject) => {
//         const sql =
//             "DELETE FROM selector_file_mappings WHERE css_file_id=? AND css_selector_id=? LIMIT 1";
//         pool.query(sql, [cssFileId, selectorId], (err, results) => {
//             if (err) {
//                 reject();
//                 return;
//             }
//             resolve();
//         });
//     });
// }

export function insertCssFileDefinition(
    appId: number,
    name: string,
    pattern: string
): Promise<CSSFileDefinition> {
    return new Promise<CSSFileDefinition>((resolve, reject) => {
        db.serialize(() => {
            db.run(
                "INSERT INTO css_files(application_id, name, pattern, created_at, updated_at) VALUES (?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)",
                [appId, name, pattern],
                function(error, results) {
                    if (error) {
                        reject(error);
                        return;
                    }

                    resolve({
                        id: this.lastID,
                        name,
                        pattern,
                    });
                    return;
                }
            );
        });
    });
}

export function updateSelectorSeen(
    applicationID: number,
    selectorIDs: number[]
): Promise<void> {
    return new Promise<void>((resolve, reject) => {
        db.serialize(() => {
            db.run(
                "UPDATE css_selectors SET seen_at=CURRENT_TIMESTAMP, updated_at=CURRENT_TIMESTAMP WHERE application_id = ? AND id in(?)",
                [applicationID, selectorIDs],
                (err, results) => {
                    if (err) {
                        reject();
                        return;
                    }
                    if (this.changes !== selectorIDs.length) {
                        console.error(
                            "Weird number of selector inserted does not match"
                        );
                        reject();
                    }
                    resolve(this.changes);
                }
            );
        });
    });
}

export function getSelectorByName(
    applicationID: number,
    cssFileID: number,
    selectors: string[]
): Promise<CSSSelector[]> {
    const hashedSelectors = selectors.map(selector => {
        return (
            "UNHEX(" +
            crypto
                .createHash("md5")
                .update(selector)
                .digest("hex") +
            ")"
        );
        // return "0x" + crypto.createHash("md5").update(selector).digest("hex");
    });
    return new Promise<CSSSelector[]>((resolve, reject) => {
        if (selectors.length === 0) {
            return resolve([]);
        }

        let sql =
            "SELECT " +
            "CS.id, " +
            "CS.selector, " +
            "CS.updated_at, " +
            "CFCS.application_id " +
            "FROM `css_selectors` as CS " +
            "LEFT JOIN selector_file_mappings as CFCS ON CS.id = CFCS.css_selector_id AND CFCS.css_file_id=? " +
            "WHERE " +
            "CS.application_id=? AND " +
            "CS.md5 IN(" +
            selectors.map(selector => {
                return (
                    '"' +
                    crypto
                        .createHash("md5")
                        .update(selector)
                        .digest("hex") +
                    '"'
                );
            }) +
            ")";

        db.serialize(() => {
            db.all(sql, [cssFileID, applicationID, hashedSelectors], function(
                error,
                results,
                fields
            ) {
                if (error) {
                    reject(error);
                    return;
                }
                resolve(results);
                return;
            });
        });
    });
}

export function getAppFiles(
    applicationID: number
): Promise<CSSFileDefinition[]> {
    return new Promise<CSSFileDefinition[]>((resolve, reject) => {
        db.serialize(() => {
            db.all(
                "SELECT id, name, pattern FROM css_files where application_id=?",
                applicationID,
                function(error, results, fields) {
                    if (error) {
                        reject(error);
                        return;
                    }
                    resolve(results);
                    return;
                }
            );
        });
    });
}

// /**
//  * Return the selector + the id of the CSS FILE other than the one passed. this helps know that the selector is also
//  * present in other files
//  *
//  * @param {number} appId
//  * @param {number} cssFileId
//  * @returns {Promise<CSSSelector[]>}
//  */
// export function getAllSelectorsWithFilter(
//     appId: number,
//     cssFileId: number
// ): Promise<CSSSelector[]> {
//     return new Promise<CSSSelector[]>((resolve, reject) => {
//         let sql =
//             "SELECT " +
//             "CS.id AS id, " +
//             "CS.selector AS selector, " +
//             'if(CFCS.css_file_id IS NULL, "no", "has") as mapping_state ' +
//             "FROM `css_selectors` as CS " +
//             "LEFT JOIN selector_file_mappings as CFCS ON CS.id = CFCS.css_selector_id AND CFCS.css_file_id!=? " +
//             "WHERE " +
//             "CS.application_id=?;";

//         pool.query(sql, [cssFileId, appId], function(error, results, fields) {
//             if (error) {
//                 reject(error);
//                 return;
//             }
//             resolve(results);
//             return;
//         });
//     });
// }

// /**
//  * Return the selectors that have not been seen since 30 days.
//  *
//  * @param {number} appId
//  * @returns {Promise<Set<string>>}
//  */
// export function getAllUnusedSelectors(appId: number): Promise<Set<string>> {
//     return new Promise<Set<string>>((resolve, reject) => {
//         pool.query(
//             "SELECT selector FROM css_selectors WHERE application_id = ? AND (seen_at IS NULL OR seen_at < (NOW() - INTERVAL 30 DAY))",
//             appId,
//             (error, results, fields) => {
//                 if (error) {
//                     reject(error);
//                     return;
//                 }
//                 const s = new Set();
//                 results.forEach(item => {
//                     s.add(item.selector);
//                 });
//                 resolve(s);
//                 return;
//             }
//         );
//     });
// }
